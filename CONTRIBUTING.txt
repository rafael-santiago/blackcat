CONTRIBUTING
============

I wrote this software in 2004 and I have been evolving it since then. I decided make it public, thus who knows if
there is someone out there with the same ideas of mine and wanting to contribute...

Firstly, thank you for contributing. You should consider the following before submitting any stuff:

    - Be honest;
    - Forks always must be from <https://github.com/rafael-santiago/blackcat> (master);
    - New stuff should be tested;
    - New stuff should be detailed and documented;
    - Bugfixes should be tested;
    - Memory leaks are bad, try always to eliminate it before any pull request;
    - Sorry, but "backyard" ciphers are not welcome here;
    - This software is suitable for 'paranoid' people, so arguments such as 'no one will be capable of doing this'
      are weak by default;
    - If you added some feature that has some drawback or this is not so strong against some kind of attack(s),
      be fair by making it clear in documentation;
    - Hardcoded passwords are silly, thanks but no;
    - Security by obscurity is silly, thanks but no;
    - Trap doors? Backdoors? Are you serious?!
    - Details are awesome in a pull request;
    - The first idea is providing a new feature thinking in all supported platforms;
    - Security and secrecy at first place;
    - Speed is secondary;
    - Some observed points in K.I.S.S. and Suckless <https://suckless.org> are awesome;
    - Prebuilts are not provided, users should built it on their own or ask an another trustable party to build it
      (remember: 'paranoid' people);

The best way of knowing what could be done is reading 'doc/todo.txt'.

Avoiding libc hooking
=====================

Bad people could use libc hooking, poisoning, etc in order to steal sensitive information such as passwords. Due to it
is important to antecipate this issue by avoiding external hooking and also direct hooking (LD_PRELOAD, as instance).

    - You must avoid using direct references to memset(), memcmp() and memcpy(). Anyway, you should not avoid use them
      when coding your stuff. How? You must pass the following defines to the compiler:
            . -Dmemset=blackcat_memset
            . -Dmemcmp=blackcat_memcmp
            . -Dmemcpy=blackcat_memcpy
      Put those defines into the Hefesto's invocation file (.ivk) through the '--cflag' option;
    - The defines above create a dependency that you must satisfy by linking your new module with 'libbbase.a';
    - Always verify the bad functions usage in any new module. You should do it with the build function has_bad_funcs()
      defined into 'forgeutils/toolsets.hsl'. The general usage is:
            'has_bad_funcs($bad_funcs_list, $src_list, $includes_list, $cflags_list)'
      It returns 1 if a bad function occurrence was found into an implementation file.
      Sometimes the $bad_funcs_list can be cumbersome/useless of maintaining into your build script logics, so you can
      use the Hefesto's syscall hefesto.sys.lines_from_file():
            'has_bad_funcs(hefesto.sys.lines_from_file("../BAD_FUNCS", ".*"), $src_list, $includes_list, $cflags_list)'
      Actually, has_bad_funcs() must be called at the end of the build, into the epilogue, when something was really built:
            libmeow.epilogue() {
                if (hefesto.sys.last_forge_result() == 0) { # No build errors
                    if (has_bad_funcs(hefesto.sys.lines_from_file("../BAD_FUNCS", ".*"),
                                      $src,
                                      $inc,
                                      $cflags)) {
                        hefesto.project.abort(1); # Someone has used a function listed into 'src/BAD_FUNCS'
                    }
                }
            }
    - Turning memset, memcmp and memcpy into defines will avoid direct definitions for those functions, but what to
      do about indirect definitions done in external libraries (including libc)? You must link the application by using
      static linking. It can be done by passing the option '--link-model=static' through Hefesto's invocation file (.ivk);

Thanks for reading it and being careful about best practices when contributing! You are awesome! :)

Code style
==========

There is no absolute truth (a.k.a unicorn) when talking about code style, anyway, this is the truth that I have
been taking into consideration here.

    - Comments are good;
    - Tests are awesome (use the testing library used by the project <https://github.com/rafael-santiago/cutest>);
    - If your test need a human to drive it, sorry but your test is a kind of crap;
    - We like C (C, not C with sugar or anything similar);
    - Do not use 'func()' when prototyping use 'func(void)';
    - Arrays as function parameters are not welcome, use pointers;
    - Pointers are good. Taking into consideration that you are a fluent and experienced C programmer;
    - The project should be the most self-contained possible;
    - Git submodules are ok, but must be hosted into 'src/lib' directory;
    - This project is GPLv2. Always include the copyright disclaimer in new code files;
    - Respect the credit from other people;
    - Give credit to other people;
    - Give credit to yourself;

Code constructions
==================

Always include the statmements between '{ ... }'.

This is considered bad here:

        if (x < y) do_stuf();

        if (x < y)
            do_this();
        else
            do_that();

Macros are ok, however, "undef" it when it is not necessary anymore:

    #define scoped_left_sh(x, s) ( (x) << (s) ) | ( (x) >> ( (sizeof(x) << 3) - (s) ) )

        ...

    #undef scoped_left_sh

When passing a string pass its size besides assuming it as a null terminated string.

When commenting some code use the following format:

    // INFO(your name, or as people know you): This is an information.

    // WARN(your name, or as people know you): This is a warning.

    // FIXME(your name, or as people know you): I do not know how to solve it.

    // BUG(your name, or as people know you): I found a bug here, it should be fixed.

    // TODO(your name, or as people know you): To do item.

    // TIP(your name, or as people know you): You are giving the tips for people understand some craziness, weird code chunk.

Static functions even being static must be prototyped at the beginning of the implementation file.

Avoid using double quotes when including files in C implementation stuff (local includes). Headers
and implemenation files should be relative to the toplevel src subdirectory.

Gotos are ok if it always move forward but never ever backward.

Avoid capital letters in function and variable names.

C Defines:

    - while constants must be in upper case;
    - while macros must be in lower case;
    - while a DSL statement must be in upper case;
