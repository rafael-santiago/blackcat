#
#                          Copyright (C) 2018 by Rafael Santiago
#
# Use of this source code is governed by GPL-v2 license that can
# be found in the COPYING file.
#
#

include ~/toolsets/gcc/gcc-lib.hsl
include ~/toolsets/gcc/gcc-app.hsl
include ~/toolsets/clang/clang-lib.hsl
include ~/toolsets/gcc/gcc-app.hsl
include ~/toolsets/common/utils/lang/c/dependency_scanner.hsl

include on linux ~/toolsets/linux/linux-module.hsl
include on freebsd ~/toolsets/freebsd/freebsd-module.hsl
include on netbsd ~/toolsets/netbsd/netbsd-module.hsl
include on windows ~/toolsets/null/null.hsl

include ~/fsutil.hsl

function blackcat_rootdir() : result type string {
    result hefesto.sys.env("BLACKCAT_ROOTDIR");
}

function get_app_toolset() : result type string {
    result get_toolset() + "-c-app";
}

function get_lib_toolset() : result type string {
    result get_toolset() + "-c-lib";
}

function get_lkm_toolset() : result type string {
    if (hefesto.sys.os_name() == "linux") {
        result "linux-lkm";
    } else if (hefesto.sys.os_name() == "freebsd") {
        result "freebsd-kld";
    } else if (hefesto.sys.os_name() == "netbsd") {
        result "netbsd-module";
    }
    result "no-tool-any-set-lkm";
}

function get_codes(dirlist type list, deps type string) : result type list {
    var oldcwd type string;
    var codes type list;

    $oldcwd = hefesto.sys.pwd();

    hefesto.sys.setenv("GET_C_CPP_DEPS_SRC_ROOT", $oldcwd);

    var d type int;

    $d = 0;

    while ($d < $dirlist.count()) {
        var dirpath type string;
        $dirpath = $dirlist.item($d);

        if (hefesto.sys.cd($dirpath)) {
            $deps = $deps + get_c_cpp_deps();
            $codes.ls(".*\\.c$");
            hefesto.sys.cd($oldcwd);
        } else {
            hefesto.sys.echo("WARN: Unable to access the path \'" + $dirpath + "'. Just skipping it.\n");
        }

        $d = $d + 1;
    }

    hefesto.sys.cd($oldcwd);

    hefesto.sys.byref($deps);

    result $codes;
}

function mkclean() : result type none {
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();
    mkclean_recur(lsdir());
    hefesto.sys.cd($oldcwd);
}

local function mkclean_recur(dirlist type list) : result type none {
    var d type int;

    $d = 0;

    while ($d < $dirlist.count()) {
        if (hefesto.sys.cd($dirlist.item($d))) {
            var objs type list;
            $objs.ls(".*\\.o$");

            var o type int;
            $o = 0;
            while ($o < $objs.count()) {
                var filepath type string;
                $filepath = $objs.item($o);
                hefesto.sys.echo("Removing: " + $filepath + "\n");
                hefesto.sys.rm($filepath);

                $o = $o + 1;
            }

            mkclean_recur(lsdir());
        }
        $d = $d + 1;
    }
}

local function build_libkryptos() : result type int {
    var libpath type string;
    var rootdir type string;

    $rootdir = hefesto.sys.env("BLACKCAT_ROOTDIR");

    $libpath = hefesto.sys.make_path($rootdir, "lib/kryptos/lib/libkryptos.a");

    var exit_code type int;

    $exit_code = 0;

    if (isfile($libpath) == 0) {
        $exit_code = 1;
        var oldcwd type string;
        $oldcwd = hefesto.sys.pwd();
        $libpath = hefesto.sys.make_path($rootdir, "lib/kryptos/src/");
        if (hefesto.sys.cd($libpath)) {
            if (hefesto.sys.os_name() == "freebsd") {
                $exit_code = hefesto.sys.run("hefesto");
            } else {
                $exit_code = hefesto.sys.run("hefesto --no-hmac-tests");
            }
            hefesto.sys.cd($oldcwd);
        }
    }

    result $exit_code;
}

local function build_libcutest() : result type int {
    var libpath type string;
    var rootdir type string;

    $rootdir = hefesto.sys.env("BLACKCAT_ROOTDIR");

    $libpath = hefesto.sys.make_path($rootdir, "lib/cutest/src/lib/libcutest.a");

    var exit_code type int;

    $exit_code = 0;

    if (isfile($libpath) == 0) {
        $exit_code = 1;
        var oldcwd type string;
        $oldcwd = hefesto.sys.pwd();
        $libpath = hefesto.sys.make_path($rootdir, "lib/cutest/src/");
        if (hefesto.sys.cd($libpath)) {
            $exit_code = hefesto.sys.run("hefesto");
            hefesto.sys.cd($oldcwd);
        }
    }

    result $exit_code;
}

local function build_libaccacia() : result type int {
    var libpath type string;
    var rootdir type string;

    $rootdir = hefesto.sys.env("BLACKCAT_ROOTDIR");

    $libpath = hefesto.sys.make_path($rootdir, "lib/accacia/lib/libaccacia.a");

    var exit_code type int;

    $exit_code = 0;

    if (isfile($libpath) == 0) {
        $exit_code = 1;
        var oldcwd type string;
        $oldcwd = hefesto.sys.pwd();
        $libpath = hefesto.sys.make_path($rootdir, "lib/accacia/src");
        if (hefesto.sys.cd($libpath)) {
            $exit_code = hefesto.sys.run("hefesto");
            hefesto.sys.cd($oldcwd);
        }
    }

    result $exit_code;
}

local function build_hdev() : result type int {
    var option type list;

    $option = hefesto.sys.get_option("no-dev");

    if ($option.count() > 0) {
        result 0;
    }

    $option = hefesto.sys.get_option("blackcat-dev-tests");

    if ($option.count() == 0) {
        result 0;
    }

    var exit_code type int;
    var old_cwd type string;
    $old_cwd = hefesto.sys.pwd();

    $exit_code = 1;

    if (hefesto.sys.cd("hdev")) {
        $exit_code = hefesto.sys.run("hefesto");
        hefesto.sys.cd($old_cwd);
    }

    result $exit_code;
}

local function build_ntool() : result type int {
    var exit_code type int;

    $exit_code = 1;

    var old_cwd type string;
    $old_cwd = hefesto.sys.pwd();

    if (hefesto.sys.cd("ntool")) {
        $exit_code = hefesto.sys.run("hefesto");
        hefesto.sys.cd($old_cwd);
    }

    result $exit_code;
}

function build(libname type string) : result type int {
    var func_addr type int;

    $func_addr = hefesto.sys.get_func_addr("build_" + $libname);

    if ($func_addr == 0) {
        hefesto.sys.echo("BUILD ERROR: Unknown lib '" + $libname + "'.\n");
        result 1;
    }

    result hefesto.sys.call_func_addr($func_addr);
}

local function get_toolset() : result type string {
    var option type list;
    var return type string;

    $option = hefesto.sys.get_option("toolset");

    if ($option.count() > 0) {
        $return = $option.item(0);
        $return.replace("-.*$", "");
        result $return;
    }

    if (has_gcc()) {
        $return = "gcc";
    } else if (has_clang()) {
        $return = "clang";
    } else {
        hefesto.sys.echo("ERROR: You must have gcc or clang well installed in your system.\n" +
                         "       Install one of them and try again later.\n");
        hefesto.project.abort(1);
    }

    result $return;
}

local function has_gcc() : result type int {
    result (execbkcmd("gcc --version") == 0);
}

local function has_clang() : result type int {
    result (execbkcmd("clang --version") == 0);
}

local function execbkcmd(cmdline type string) : result type int {
    if (hefesto.sys.os_name() != "windows") {
        $cmdline = $cmdline + " > /dev/null 2>&1";
    } else {
        $cmdline = $cmdline + " >  nul 2>&1";
    }

    result hefesto.sys.run($cmdline);
}

function setup_ciphering_schemes(cflags type list) : result type none {
    var ciphers type list;
    var defines type list;

    $ciphers.add_item("arc4"); $defines.add_item("-DBLACKCAT_WITH_ARC4=1");
    $ciphers.add_item("seal"); $defines.add_item("-DBLACKCAT_WITH_SEAL=1");
    $ciphers.add_item("rabbit"); $defines.add_item("-DBLACKCAT_WITH_RABBIT=1");
    $ciphers.add_item("aes"); $defines.add_item("-DBLACKCAT_WITH_AES=1");
    $ciphers.add_item("des"); $defines.add_item("-DBLACKCAT_WITH_DES=1");
    $ciphers.add_item("idea"); $defines.add_item("-DBLACKCAT_WITH_IDEA=1");
    $ciphers.add_item("rc2"); $defines.add_item("-DBLACKCAT_WITH_RC2=1");
    $ciphers.add_item("rc5"); $defines.add_item("-DBLACKCAT_WITH_RC5=1");
    $ciphers.add_item("rc6"); $defines.add_item("-DBLACKCAT_WITH_RC6=1");
    $ciphers.add_item("feal"); $defines.add_item("-DBLACKCAT_WITH_FEAL=1");
    $ciphers.add_item("cast5"); $defines.add_item("-DBLACKCAT_WITH_CAST5=1");
    $ciphers.add_item("camellia"); $defines.add_item("-DBLACKCAT_WITH_CAMELLIA=1");
    $ciphers.add_item("safer-k64"); $defines.add_item("-DBLACKCAT_WITH_SAFERK64=1");
    $ciphers.add_item("blowfish"); $defines.add_item("-DBLACKCAT_WITH_BLOWFISH=1");
    $ciphers.add_item("serpent"); $defines.add_item("-DBLACKCAT_WITH_SERPENT=1");
    $ciphers.add_item("tea"); $defines.add_item("-DBLACKCAT_WITH_TEA=1");
    $ciphers.add_item("xtea"); $defines.add_item("-DBLACKCAT_WITH_XTEA=1");
    $ciphers.add_item("misty1"); $defines.add_item("-DBLACKCAT_WITH_MISTY1=1");##
    $ciphers.add_item("mars"); $defines.add_item("-DBLACKCAT_WITH_MARS=1");
    $ciphers.add_item("present"); $defines.add_item("-DBLACKCAT_WITH_PRESENT=1");
    $ciphers.add_item("shacal1"); $defines.add_item("-DBLACKCAT_WITH_SHACAL1=1");
    $ciphers.add_item("shacal2"); $defines.add_item("-DBLACKCAT_WITH_SHACAL2=1");
    $ciphers.add_item("noekeon"); $defines.add_item("-DBLACKCAT_WITH_NOEKEON=1");

    var avail_ciphers type list;
    $avail_ciphers = hefesto.sys.get_option("avail-ciphers");

    if ($avail_ciphers.count() > 0) {
        var c type int;
        $c = 0;
        hefesto.sys.echo("*** The currently available ciphers are:\n");
        while ($c < $ciphers.count()) {
            hefesto.sys.echo("\t" + $ciphers.item($c) + "\n");
            $c = $c + 1;
        }
        hefesto.sys.echo("*** Include them by using the build option '--with-ciphers'.\n");
        hefesto.project.abort(0);
    }

    var with_ciphers type list;
    var message type string;

    $with_ciphers = hefesto.sys.get_option("with-ciphers");

    if ($with_ciphers.count() == 0) {
        hefesto.sys.echo("BUILD ERROR: No ciphers were configured.\n");
        hefesto.project.abort(1);
    }

    $message = "*** Configured ciphering schemes:\n";

    var w type int;
    $w = 0;

    while ($w < $with_ciphers.count()) {
        var cipher type string;
        var define type string;
        var cidx type int;

        $cipher = $with_ciphers.item($w);
        $cidx = $ciphers.index_of($cipher);
        if ($cidx == -1) {
            hefesto.sys.echo("BUILD ERROR: Unknown cipher '" + $cipher + "' included in --with-ciphers option.\n" +
                             "             Use the option --avail-ciphers to see the supported ones.\n");
            hefesto.project.abort(1);
        }

        $message = $message + "\t" + $cipher + "\n";

        $define = $defines.item($cidx);

        $cflags.add_item($define);

        $w = $w + 1;
    }

    hefesto.sys.byref($cflags);

    if (hefesto.project.name() == "libbbase") {
        hefesto.sys.echo($message + "***\n");
    }
}
