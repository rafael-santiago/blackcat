#
#                          Copyright (C) 2018 by Rafael Santiago
#
# Use of this source code is governed by GPL-v2 license that can
# be found in the COPYING file.
#
#

include ~/toolsets/common/utils/lang/c/dependency_scanner.hsl
include ../../forgeutils/toolsets.hsl

local var curr_toolset type string;

local var src type list;
local var includes type list;
local var cflags type list;
local var libraries type list;
local var ldflags type list;

local var appname type string;

project blackcat-cmd-tests : toolset $curr_toolset : $src, $includes, $cflags, $libraries, $ldflags, $appname;

blackcat-cmd-tests.preloading() {
    $curr_toolset = get_app_toolset();
}

blackcat-cmd-tests.prologue() {
    if (hefesto.sys.os_name() != "windows") {
        build("hdev");
    }

    $src.ls(".*\\.c$");

    $includes = hefesto.sys.get_option("includes");
    $cflags = hefesto.sys.get_option("cflags");
    $libraries = hefesto.sys.get_option("libraries");
    $ldflags = hefesto.sys.get_option("ldflags");

    setup_ciphering_schemes($cflags);

    if ($curr_toolset.match("^clang") == 1) {
        $cflags.add_item("-Wno-pointer-sign");
    }

    $ldflags = get_cmd_objects($ldflags);

    if (build("libcutest") != 0) {
        hefesto.project.abort(1);
    }

    if (hefesto.sys.os_name() == "linux") {
        $ldflags.add_item("-ldl");
        $ldflags.add_item("-lpthread");
    } else if (hefesto.sys.os_name() == "freebsd") {
        $ldflags.add_item("-lexecinfo");
        $ldflags.add_item("-lpthread");
    } else if (hefesto.sys.os_name() == "netbsd") {
        $cflags.add_item("-std=c99");
        $ldflags.add_item("-lexecinfo");
        $ldflags.add_item("-lpthread");
        $ldflags.add_item("-lprop");
    } else if (hefesto.sys.os_name() == "windows") {
        $ldflags.del_item("-lbcnet");
    } else if (hefesto.sys.os_name() == "openbsd") {
        $ldflags.add_item("-lexecinfo");
        $ldflags.add_item("-lpthread");
    } else if (hefesto.sys.os_name() == "minix") {
        $ldflags.add_item("-lexecinfo");
    }

    var option type list;
    $option = hefesto.sys.get_option("skip-net-tests");

    var skip_net_tests type list;
    $skip_net_tests = hefesto.sys.lines_from_file("../../SKIP_NET_TESTS", ".*");

    if ($option.count() > 0 || $skip_net_tests.index_of(hefesto.sys.os_name()) > -1) {
        $cflags.add_item("-DSKIP_NET_TESTS=1");
    } else {
        build("ntool");
    }

    if (hefesto.sys.os_name() != "windows") {
        if (isdir("/usr/local/include")) {
            $includes.add_item("/usr/local/include");
        }

        if (isdir("/usr/local/lib")) {
            $libraries.add_item("/usr/local/lib");
        }
    }

    $appname = get_appname();
}

blackcat-cmd-tests.epilogue() {
    if (hefesto.sys.last_forge_result() == 0) {
        if (run_test() != 0) {
            hefesto.project.abort(1);
        }
    }
}

local function get_appname() : result type string {
    var appname type string;

    $appname = "blackcat-cmd-tests";

    if (hefesto.sys.os_name() == "windows") {
        $appname = $appname + ".exe";
    }

    result $appname;
}

local function run_test() : result type int {
    var cmdline type string;
    var option type list;

    $option = hefesto.sys.get_option("bin-output-dir");
    $cmdline = "";

    if ($option.count() > 0) {
        $cmdline = $option.item(0);
    } else if (hefesto.sys.os_name() != "windows") {
        $cmdline = "./";
    }

    $cmdline = hefesto.sys.make_path($cmdline, $appname) + " ";

    if (hefesto.sys.os_name() != "netbsd") {
        # INFO(Rafael): NetBSD libc allocates some stuff in remove() for performance issues and it is detected as memory
        #               leak by libcutest. Let's avoid leak-check in NetBSD.
        $cmdline = $cmdline + "--cutest-leak-check=yes ";
    }

    $cmdline = $cmdline + hefesto.project.cmdline();

    result hefesto.sys.run($cmdline);
}

local function get_cmd_objects(ldflags type list) : result type list {
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();

    if (hefesto.sys.cd("../o")) {
        var objs type list;

        $objs.ls(".*\\.o$");

        var o type int;

        $o = 0;

        while ($o < $objs.count()) {
            var item type string;
            $item = $objs.item($o);
            if ($item.match(".*main\\.o$") == 1) {
                $objs.del_index($o);
                break;
            }
            $o = $o + 1;
        }

        if (hefesto.sys.os_name() == "windows" && $objs.count() > 0) {
            var done type int;

            $done = 0;

            while ($done == 0) {
                var curr_obj type string;
                $curr_obj = $objs.item(0);
                $done = $curr_obj.match("^\\\".*\\\"$");
                if ($done == 1) {
                   continue;
                }
                $objs.add_item("\"" + $curr_obj + "\"");
                $objs.del_index(0);
           }
        }

        # INFO(Rafael): GCC has this 'problem'; if some flat object file depends on some previous ldflag
        #               it must be added after the object file in the linker flags list. Otherwise the
        #               dependency will not be resolved.

        $o = 0;

        while ($o < $ldflags.count()) {
            $objs.add_item($ldflags.item($o));
            $o = $o + 1;
        }

        hefesto.sys.cd($oldcwd);

        result $objs;
    }

    result $ldflags;
}
